2020-12-13 23:40:30:461 grammar LogManager.java:25 before: (COMBINED_GRAMMAR cal (RULES (RULE prog (BLOCK (ALT decl_list function_list main))) (RULE decl_list (BLOCK (ALT decl SEMI decl_list) (ALT EPSILON))) (RULE decl (BLOCK (ALT var_decl) (ALT const_decl))) (RULE var_decl (BLOCK (ALT Variable Identifier COLON type))) (RULE const_decl (BLOCK (ALT Constant Identifier COLON type ASSIGN expression))) (RULE function_list (BLOCK (ALT function function_list) (ALT EPSILON))) (RULE function (BLOCK (ALT type Identifier LBR parameter_list RBR Is decl_list Begin statement_block Return LBR (BLOCK (ALT expression) (ALT EPSILON)) RBR SEMI End))) (RULE type (BLOCK (ALT TypeInteger) (ALT TypeBoolean) (ALT TypeVoid))) (RULE parameter_list (BLOCK (ALT nemp_parameter_list) (ALT EPSILON))) (RULE nemp_parameter_list (BLOCK (ALT Identifier COLON type) (ALT Identifier COLON type COMMA nemp_parameter_list))) (RULE main (BLOCK (ALT Main Begin decl_list statement_block End))) (RULE statement_block (BLOCK (ALT (BLOCK (ALT statement statement_block))) (ALT EPSILON))) (RULE statement (BLOCK (ALT Identifier ASSIGN expression SEMI) (ALT Identifier LBR arg_list RBR SEMI) (ALT Begin statement_block End) (ALT If condition Begin statement_block End Else Begin statement_block End) (ALT While condition Begin statement_block End) (ALT Skipp SEMI))) (RULE expression (BLOCK (ALT bit binary_arith_op bit) (ALT LBR expression RBR) (ALT Identifier LBR arg_list RBR) (ALT bit))) (RULE binary_arith_op (BLOCK (ALT PLUS) (ALT MINUS))) (RULE bit (BLOCK (ALT Identifier) (ALT MINUS Identifier) (ALT Number) (ALT True) (ALT False))) (RULE condition (BLOCK (ALT TILDE condition) (ALT LBR condition RBR) (ALT expression comp_op expression) (ALT condition (BLOCK (ALT OR) (ALT AND)) condition))) (RULE comp_op (BLOCK (ALT EQUAL) (ALT NOTEQUAL) (ALT LESS) (ALT LESSEQUAL) (ALT GREATER) (ALT GREATEREQUAL))) (RULE arg_list (BLOCK (ALT nemp_arg_list) (ALT EPSILON))) (RULE nemp_arg_list (BLOCK (ALT Identifier) (ALT Identifier COMMA nemp_arg_list))) (RULE Variable (BLOCK (ALT V A R I A B L E))) (RULE Constant (BLOCK (ALT C O N S T A N T))) (RULE Return (BLOCK (ALT R E T U R N))) (RULE TypeInteger (BLOCK (ALT I N T E G E R))) (RULE TypeBoolean (BLOCK (ALT B O O L E A N))) (RULE TypeVoid (BLOCK (ALT V O I D))) (RULE Main (BLOCK (ALT M A I N))) (RULE If (BLOCK (ALT I F))) (RULE Else (BLOCK (ALT E L S E))) (RULE True (BLOCK (ALT T R U E))) (RULE False (BLOCK (ALT F A L S E))) (RULE While (BLOCK (ALT W H I L E))) (RULE Begin (BLOCK (ALT B E G I N))) (RULE End (BLOCK (ALT E N D))) (RULE Is (BLOCK (ALT I S))) (RULE Skipp (BLOCK (ALT S K I P))) (RULE COMMA (BLOCK (ALT ','))) (RULE SEMI (BLOCK (ALT ';'))) (RULE COLON (BLOCK (ALT ':'))) (RULE ASSIGN (BLOCK (ALT ':='))) (RULE LBR (BLOCK (ALT '('))) (RULE RBR (BLOCK (ALT ')'))) (RULE PLUS (BLOCK (ALT '+'))) (RULE MINUS (BLOCK (ALT '-'))) (RULE TILDE (BLOCK (ALT '~'))) (RULE NOTEQUAL (BLOCK (ALT '!='))) (RULE OR (BLOCK (ALT '|'))) (RULE AND (BLOCK (ALT '&'))) (RULE EQUAL (BLOCK (ALT '='))) (RULE LESSEQUAL (BLOCK (ALT '<='))) (RULE LESS (BLOCK (ALT '<'))) (RULE GREATER (BLOCK (ALT '>'))) (RULE GREATEREQUAL (BLOCK (ALT '>='))) (RULE A (RULEMODIFIERS fragment) (BLOCK (ALT (BLOCK (ALT 'a') (ALT 'A'))))) (RULE B (RULEMODIFIERS fragment) (BLOCK (ALT (BLOCK (ALT 'b') (ALT 'B'))))) (RULE C (RULEMODIFIERS fragment) (BLOCK (ALT (BLOCK (ALT 'c') (ALT 'C'))))) (RULE D (RULEMODIFIERS fragment) (BLOCK (ALT (BLOCK (ALT 'd') (ALT 'D'))))) (RULE E (RULEMODIFIERS fragment) (BLOCK (ALT (BLOCK (ALT 'e') (ALT 'E'))))) (RULE F (RULEMODIFIERS fragment) (BLOCK (ALT (BLOCK (ALT 'f') (ALT 'F'))))) (RULE G (RULEMODIFIERS fragment) (BLOCK (ALT (BLOCK (ALT 'g') (ALT 'G'))))) (RULE H (RULEMODIFIERS fragment) (BLOCK (ALT (BLOCK (ALT 'h') (ALT 'H'))))) (RULE I (RULEMODIFIERS fragment) (BLOCK (ALT (BLOCK (ALT 'i') (ALT 'I'))))) (RULE K (RULEMODIFIERS fragment) (BLOCK (ALT (BLOCK (ALT 'k') (ALT 'K'))))) (RULE L (RULEMODIFIERS fragment) (BLOCK (ALT (BLOCK (ALT 'l') (ALT 'L'))))) (RULE M (RULEMODIFIERS fragment) (BLOCK (ALT (BLOCK (ALT 'm') (ALT 'M'))))) (RULE N (RULEMODIFIERS fragment) (BLOCK (ALT (BLOCK (ALT 'n') (ALT 'N'))))) (RULE O (RULEMODIFIERS fragment) (BLOCK (ALT (BLOCK (ALT 'o') (ALT 'O'))))) (RULE P (RULEMODIFIERS fragment) (BLOCK (ALT (BLOCK (ALT 'p') (ALT 'P'))))) (RULE R (RULEMODIFIERS fragment) (BLOCK (ALT (BLOCK (ALT 'r') (ALT 'R'))))) (RULE S (RULEMODIFIERS fragment) (BLOCK (ALT (BLOCK (ALT 's') (ALT 'S'))))) (RULE T (RULEMODIFIERS fragment) (BLOCK (ALT (BLOCK (ALT 't') (ALT 'T'))))) (RULE U (RULEMODIFIERS fragment) (BLOCK (ALT (BLOCK (ALT 'u') (ALT 'U'))))) (RULE V (RULEMODIFIERS fragment) (BLOCK (ALT (BLOCK (ALT 'v') (ALT 'V'))))) (RULE W (RULEMODIFIERS fragment) (BLOCK (ALT (BLOCK (ALT 'w') (ALT 'W'))))) (RULE Y (RULEMODIFIERS fragment) (BLOCK (ALT (BLOCK (ALT 'y') (ALT 'Y'))))) (RULE Number (BLOCK (ALT (BLOCK (ALT (? (BLOCK (ALT '-'))) [1-9] (* (BLOCK (ALT [0-9])))) (ALT '0'))))) (RULE Identifier (BLOCK (ALT [a-zA-Z] (* (BLOCK (ALT [a-zA-Z0-9_])))))) (RULE COMMENT (BLOCK (LEXER_ALT_ACTION (ALT '/*' (* (BLOCK (ALT COMMENT) (ALT .))) '*/') skip))) (RULE LINE_COMMENT (BLOCK (LEXER_ALT_ACTION (ALT '//' (* (BLOCK (ALT (~ (SET [\r\n])))))) skip))) (RULE WS (BLOCK (LEXER_ALT_ACTION (ALT (+ (BLOCK (ALT [ \t\n\r])))) skip)))))
2020-12-13 23:40:30:494 grammar LogManager.java:25 after: (COMBINED_GRAMMAR cal (RULES (RULE prog (BLOCK (ALT decl_list function_list main))) (RULE decl_list (BLOCK (ALT decl SEMI decl_list) (ALT EPSILON))) (RULE decl (BLOCK (ALT var_decl) (ALT const_decl))) (RULE var_decl (BLOCK (ALT Variable Identifier COLON type))) (RULE const_decl (BLOCK (ALT Constant Identifier COLON type ASSIGN expression))) (RULE function_list (BLOCK (ALT function function_list) (ALT EPSILON))) (RULE function (BLOCK (ALT type Identifier LBR parameter_list RBR Is decl_list Begin statement_block Return LBR (BLOCK (ALT expression) (ALT EPSILON)) RBR SEMI End))) (RULE type (BLOCK (ALT TypeInteger) (ALT TypeBoolean) (ALT TypeVoid))) (RULE parameter_list (BLOCK (ALT nemp_parameter_list) (ALT EPSILON))) (RULE nemp_parameter_list (BLOCK (ALT Identifier COLON type) (ALT Identifier COLON type COMMA nemp_parameter_list))) (RULE main (BLOCK (ALT Main Begin decl_list statement_block End))) (RULE statement_block (BLOCK (ALT (BLOCK (ALT statement statement_block))) (ALT EPSILON))) (RULE statement (BLOCK (ALT Identifier ASSIGN expression SEMI) (ALT Identifier LBR arg_list RBR SEMI) (ALT Begin statement_block End) (ALT If condition Begin statement_block End Else Begin statement_block End) (ALT While condition Begin statement_block End) (ALT Skipp SEMI))) (RULE expression (BLOCK (ALT bit binary_arith_op bit) (ALT LBR expression RBR) (ALT Identifier LBR arg_list RBR) (ALT bit))) (RULE binary_arith_op (BLOCK (ALT (SET PLUS MINUS)))) (RULE bit (BLOCK (ALT Identifier) (ALT MINUS Identifier) (ALT Number) (ALT True) (ALT False))) (RULE condition (BLOCK (ALT TILDE condition) (ALT LBR condition RBR) (ALT expression comp_op expression) (ALT condition (SET OR AND) condition))) (RULE comp_op (BLOCK (ALT (SET EQUAL NOTEQUAL LESS LESSEQUAL GREATER GREATEREQUAL)))) (RULE arg_list (BLOCK (ALT nemp_arg_list) (ALT EPSILON))) (RULE nemp_arg_list (BLOCK (ALT Identifier) (ALT Identifier COMMA nemp_arg_list))) (RULE Variable (BLOCK (ALT V A R I A B L E))) (RULE Constant (BLOCK (ALT C O N S T A N T))) (RULE Return (BLOCK (ALT R E T U R N))) (RULE TypeInteger (BLOCK (ALT I N T E G E R))) (RULE TypeBoolean (BLOCK (ALT B O O L E A N))) (RULE TypeVoid (BLOCK (ALT V O I D))) (RULE Main (BLOCK (ALT M A I N))) (RULE If (BLOCK (ALT I F))) (RULE Else (BLOCK (ALT E L S E))) (RULE True (BLOCK (ALT T R U E))) (RULE False (BLOCK (ALT F A L S E))) (RULE While (BLOCK (ALT W H I L E))) (RULE Begin (BLOCK (ALT B E G I N))) (RULE End (BLOCK (ALT E N D))) (RULE Is (BLOCK (ALT I S))) (RULE Skipp (BLOCK (ALT S K I P))) (RULE COMMA (BLOCK (ALT ','))) (RULE SEMI (BLOCK (ALT ';'))) (RULE COLON (BLOCK (ALT ':'))) (RULE ASSIGN (BLOCK (ALT ':='))) (RULE LBR (BLOCK (ALT '('))) (RULE RBR (BLOCK (ALT ')'))) (RULE PLUS (BLOCK (ALT '+'))) (RULE MINUS (BLOCK (ALT '-'))) (RULE TILDE (BLOCK (ALT '~'))) (RULE NOTEQUAL (BLOCK (ALT '!='))) (RULE OR (BLOCK (ALT '|'))) (RULE AND (BLOCK (ALT '&'))) (RULE EQUAL (BLOCK (ALT '='))) (RULE LESSEQUAL (BLOCK (ALT '<='))) (RULE LESS (BLOCK (ALT '<'))) (RULE GREATER (BLOCK (ALT '>'))) (RULE GREATEREQUAL (BLOCK (ALT '>='))) (RULE A (RULEMODIFIERS fragment) (BLOCK (ALT (SET 'a' 'A')))) (RULE B (RULEMODIFIERS fragment) (BLOCK (ALT (SET 'b' 'B')))) (RULE C (RULEMODIFIERS fragment) (BLOCK (ALT (SET 'c' 'C')))) (RULE D (RULEMODIFIERS fragment) (BLOCK (ALT (SET 'd' 'D')))) (RULE E (RULEMODIFIERS fragment) (BLOCK (ALT (SET 'e' 'E')))) (RULE F (RULEMODIFIERS fragment) (BLOCK (ALT (SET 'f' 'F')))) (RULE G (RULEMODIFIERS fragment) (BLOCK (ALT (SET 'g' 'G')))) (RULE H (RULEMODIFIERS fragment) (BLOCK (ALT (SET 'h' 'H')))) (RULE I (RULEMODIFIERS fragment) (BLOCK (ALT (SET 'i' 'I')))) (RULE K (RULEMODIFIERS fragment) (BLOCK (ALT (SET 'k' 'K')))) (RULE L (RULEMODIFIERS fragment) (BLOCK (ALT (SET 'l' 'L')))) (RULE M (RULEMODIFIERS fragment) (BLOCK (ALT (SET 'm' 'M')))) (RULE N (RULEMODIFIERS fragment) (BLOCK (ALT (SET 'n' 'N')))) (RULE O (RULEMODIFIERS fragment) (BLOCK (ALT (SET 'o' 'O')))) (RULE P (RULEMODIFIERS fragment) (BLOCK (ALT (SET 'p' 'P')))) (RULE R (RULEMODIFIERS fragment) (BLOCK (ALT (SET 'r' 'R')))) (RULE S (RULEMODIFIERS fragment) (BLOCK (ALT (SET 's' 'S')))) (RULE T (RULEMODIFIERS fragment) (BLOCK (ALT (SET 't' 'T')))) (RULE U (RULEMODIFIERS fragment) (BLOCK (ALT (SET 'u' 'U')))) (RULE V (RULEMODIFIERS fragment) (BLOCK (ALT (SET 'v' 'V')))) (RULE W (RULEMODIFIERS fragment) (BLOCK (ALT (SET 'w' 'W')))) (RULE Y (RULEMODIFIERS fragment) (BLOCK (ALT (SET 'y' 'Y')))) (RULE Number (BLOCK (ALT (BLOCK (ALT (? (BLOCK (ALT '-'))) [1-9] (* (BLOCK (ALT [0-9])))) (ALT '0'))))) (RULE Identifier (BLOCK (ALT [a-zA-Z] (* (BLOCK (ALT [a-zA-Z0-9_])))))) (RULE COMMENT (BLOCK (LEXER_ALT_ACTION (ALT '/*' (* (BLOCK (ALT COMMENT) (ALT .))) '*/') skip))) (RULE LINE_COMMENT (BLOCK (LEXER_ALT_ACTION (ALT '//' (* (BLOCK (ALT (~ (SET [\r\n])))))) skip))) (RULE WS (BLOCK (LEXER_ALT_ACTION (ALT (+ (BLOCK (ALT [ \t\n\r])))) skip)))))
2020-12-13 23:40:30:530 grammar LogManager.java:25 after extract implicit lexer =(COMBINED_GRAMMAR cal (RULES (RULE prog (BLOCK (ALT decl_list function_list main))) (RULE decl_list (BLOCK (ALT decl SEMI decl_list) (ALT EPSILON))) (RULE decl (BLOCK (ALT var_decl) (ALT const_decl))) (RULE var_decl (BLOCK (ALT Variable Identifier COLON type))) (RULE const_decl (BLOCK (ALT Constant Identifier COLON type ASSIGN expression))) (RULE function_list (BLOCK (ALT function function_list) (ALT EPSILON))) (RULE function (BLOCK (ALT type Identifier LBR parameter_list RBR Is decl_list Begin statement_block Return LBR (BLOCK (ALT expression) (ALT EPSILON)) RBR SEMI End))) (RULE type (BLOCK (ALT TypeInteger) (ALT TypeBoolean) (ALT TypeVoid))) (RULE parameter_list (BLOCK (ALT nemp_parameter_list) (ALT EPSILON))) (RULE nemp_parameter_list (BLOCK (ALT Identifier COLON type) (ALT Identifier COLON type COMMA nemp_parameter_list))) (RULE main (BLOCK (ALT Main Begin decl_list statement_block End))) (RULE statement_block (BLOCK (ALT (BLOCK (ALT statement statement_block))) (ALT EPSILON))) (RULE statement (BLOCK (ALT Identifier ASSIGN expression SEMI) (ALT Identifier LBR arg_list RBR SEMI) (ALT Begin statement_block End) (ALT If condition Begin statement_block End Else Begin statement_block End) (ALT While condition Begin statement_block End) (ALT Skipp SEMI))) (RULE expression (BLOCK (ALT bit binary_arith_op bit) (ALT LBR expression RBR) (ALT Identifier LBR arg_list RBR) (ALT bit))) (RULE binary_arith_op (BLOCK (ALT (SET PLUS MINUS)))) (RULE bit (BLOCK (ALT Identifier) (ALT MINUS Identifier) (ALT Number) (ALT True) (ALT False))) (RULE condition (BLOCK (ALT TILDE condition) (ALT LBR condition RBR) (ALT expression comp_op expression) (ALT condition (SET OR AND) condition))) (RULE comp_op (BLOCK (ALT (SET EQUAL NOTEQUAL LESS LESSEQUAL GREATER GREATEREQUAL)))) (RULE arg_list (BLOCK (ALT nemp_arg_list) (ALT EPSILON))) (RULE nemp_arg_list (BLOCK (ALT Identifier) (ALT Identifier COMMA nemp_arg_list)))))
2020-12-13 23:40:30:536 grammar LogManager.java:25 lexer =(LEXER_GRAMMAR calLexer (RULES (RULE Variable (BLOCK (ALT V A R I A B L E))) (RULE Constant (BLOCK (ALT C O N S T A N T))) (RULE Return (BLOCK (ALT R E T U R N))) (RULE TypeInteger (BLOCK (ALT I N T E G E R))) (RULE TypeBoolean (BLOCK (ALT B O O L E A N))) (RULE TypeVoid (BLOCK (ALT V O I D))) (RULE Main (BLOCK (ALT M A I N))) (RULE If (BLOCK (ALT I F))) (RULE Else (BLOCK (ALT E L S E))) (RULE True (BLOCK (ALT T R U E))) (RULE False (BLOCK (ALT F A L S E))) (RULE While (BLOCK (ALT W H I L E))) (RULE Begin (BLOCK (ALT B E G I N))) (RULE End (BLOCK (ALT E N D))) (RULE Is (BLOCK (ALT I S))) (RULE Skipp (BLOCK (ALT S K I P))) (RULE COMMA (BLOCK (ALT ','))) (RULE SEMI (BLOCK (ALT ';'))) (RULE COLON (BLOCK (ALT ':'))) (RULE ASSIGN (BLOCK (ALT ':='))) (RULE LBR (BLOCK (ALT '('))) (RULE RBR (BLOCK (ALT ')'))) (RULE PLUS (BLOCK (ALT '+'))) (RULE MINUS (BLOCK (ALT '-'))) (RULE TILDE (BLOCK (ALT '~'))) (RULE NOTEQUAL (BLOCK (ALT '!='))) (RULE OR (BLOCK (ALT '|'))) (RULE AND (BLOCK (ALT '&'))) (RULE EQUAL (BLOCK (ALT '='))) (RULE LESSEQUAL (BLOCK (ALT '<='))) (RULE LESS (BLOCK (ALT '<'))) (RULE GREATER (BLOCK (ALT '>'))) (RULE GREATEREQUAL (BLOCK (ALT '>='))) (RULE A (RULEMODIFIERS fragment) (BLOCK (ALT (SET 'a' 'A')))) (RULE B (RULEMODIFIERS fragment) (BLOCK (ALT (SET 'b' 'B')))) (RULE C (RULEMODIFIERS fragment) (BLOCK (ALT (SET 'c' 'C')))) (RULE D (RULEMODIFIERS fragment) (BLOCK (ALT (SET 'd' 'D')))) (RULE E (RULEMODIFIERS fragment) (BLOCK (ALT (SET 'e' 'E')))) (RULE F (RULEMODIFIERS fragment) (BLOCK (ALT (SET 'f' 'F')))) (RULE G (RULEMODIFIERS fragment) (BLOCK (ALT (SET 'g' 'G')))) (RULE H (RULEMODIFIERS fragment) (BLOCK (ALT (SET 'h' 'H')))) (RULE I (RULEMODIFIERS fragment) (BLOCK (ALT (SET 'i' 'I')))) (RULE K (RULEMODIFIERS fragment) (BLOCK (ALT (SET 'k' 'K')))) (RULE L (RULEMODIFIERS fragment) (BLOCK (ALT (SET 'l' 'L')))) (RULE M (RULEMODIFIERS fragment) (BLOCK (ALT (SET 'm' 'M')))) (RULE N (RULEMODIFIERS fragment) (BLOCK (ALT (SET 'n' 'N')))) (RULE O (RULEMODIFIERS fragment) (BLOCK (ALT (SET 'o' 'O')))) (RULE P (RULEMODIFIERS fragment) (BLOCK (ALT (SET 'p' 'P')))) (RULE R (RULEMODIFIERS fragment) (BLOCK (ALT (SET 'r' 'R')))) (RULE S (RULEMODIFIERS fragment) (BLOCK (ALT (SET 's' 'S')))) (RULE T (RULEMODIFIERS fragment) (BLOCK (ALT (SET 't' 'T')))) (RULE U (RULEMODIFIERS fragment) (BLOCK (ALT (SET 'u' 'U')))) (RULE V (RULEMODIFIERS fragment) (BLOCK (ALT (SET 'v' 'V')))) (RULE W (RULEMODIFIERS fragment) (BLOCK (ALT (SET 'w' 'W')))) (RULE Y (RULEMODIFIERS fragment) (BLOCK (ALT (SET 'y' 'Y')))) (RULE Number (BLOCK (ALT (BLOCK (ALT (? (BLOCK (ALT '-'))) [1-9] (* (BLOCK (ALT [0-9])))) (ALT '0'))))) (RULE Identifier (BLOCK (ALT [a-zA-Z] (* (BLOCK (ALT [a-zA-Z0-9_])))))) (RULE COMMENT (BLOCK (LEXER_ALT_ACTION (ALT '/*' (* (BLOCK (ALT COMMENT) (ALT .))) '*/') skip))) (RULE LINE_COMMENT (BLOCK (LEXER_ALT_ACTION (ALT '//' (* (BLOCK (ALT (~ (SET [\r\n])))))) skip))) (RULE WS (BLOCK (LEXER_ALT_ACTION (ALT (+ (BLOCK (ALT [ \t\n\r])))) skip)))))
2020-12-13 23:40:30:846 left-recursion LogManager.java:25 condition
    :   ( {} TILDE<tokenIndex=409> condition<tokenIndex=411,p=4> 
        | LBR<tokenIndex=418> condition<tokenIndex=420> RBR<tokenIndex=422>                                         
        | expression<tokenIndex=429> comp_op<tokenIndex=431> expression<tokenIndex=433>                             
        )
        (
          {precpred(_ctx, 1)}?<p=1> (OR<tokenIndex=443> | AND<tokenIndex=447>) condition<tokenIndex=450,p=2>
        )*
    ;
2020-12-13 23:40:30:852 grammar LogManager.java:25 added: (RULE condition (BLOCK (ALT (BLOCK (ALT {} (TILDE (ELEMENT_OPTIONS (= tokenIndex 409))) (condition (ELEMENT_OPTIONS (= tokenIndex 411) (= p 4)))) (ALT (LBR (ELEMENT_OPTIONS (= tokenIndex 418))) (condition (ELEMENT_OPTIONS (= tokenIndex 420))) (RBR (ELEMENT_OPTIONS (= tokenIndex 422)))) (ALT (expression (ELEMENT_OPTIONS (= tokenIndex 429))) (comp_op (ELEMENT_OPTIONS (= tokenIndex 431))) (expression (ELEMENT_OPTIONS (= tokenIndex 433))))) (* (BLOCK (ALT ({precpred(_ctx, 1)}? (ELEMENT_OPTIONS (= p 1))) (SET (OR (ELEMENT_OPTIONS (= tokenIndex 443))) (AND (ELEMENT_OPTIONS (= tokenIndex 447)))) (condition (ELEMENT_OPTIONS (= tokenIndex 450) (= p 2)))))))))
2020-12-13 23:40:30:855 semantics LogManager.java:25 tokens={EOF=-1, Variable=1, Constant=2, Return=3, TypeInteger=4, TypeBoolean=5, TypeVoid=6, Main=7, If=8, Else=9, True=10, False=11, While=12, Begin=13, End=14, Is=15, Skipp=16, COMMA=17, SEMI=18, COLON=19, ASSIGN=20, LBR=21, RBR=22, PLUS=23, MINUS=24, TILDE=25, NOTEQUAL=26, OR=27, AND=28, EQUAL=29, LESSEQUAL=30, LESS=31, GREATER=32, GREATEREQUAL=33, Number=34, Identifier=35, COMMENT=36, LINE_COMMENT=37, WS=38}
2020-12-13 23:40:30:855 semantics LogManager.java:25 strings={','=17, ';'=18, ':'=19, ':='=20, '('=21, ')'=22, '+'=23, '-'=24, '~'=25, '!='=26, '|'=27, '&'=28, '='=29, '<='=30, '<'=31, '>'=32, '>='=33}
2020-12-13 23:40:30:866 LL1 LogManager.java:25 
DECISION 0 in rule decl_list
2020-12-13 23:40:30:866 LL1 LogManager.java:25 look=[{1..2}, {4..8, 12..14, 16, 35}]
2020-12-13 23:40:30:866 LL1 LogManager.java:25 LL(1)? true
2020-12-13 23:40:30:866 LL1 LogManager.java:25 
DECISION 1 in rule decl
2020-12-13 23:40:30:866 LL1 LogManager.java:25 look=[1, 2]
2020-12-13 23:40:30:866 LL1 LogManager.java:25 LL(1)? true
2020-12-13 23:40:30:866 LL1 LogManager.java:25 
DECISION 2 in rule function_list
2020-12-13 23:40:30:866 LL1 LogManager.java:25 look=[{4..6}, 7]
2020-12-13 23:40:30:866 LL1 LogManager.java:25 LL(1)? true
2020-12-13 23:40:30:866 LL1 LogManager.java:25 
DECISION 3 in rule function
2020-12-13 23:40:30:867 LL1 LogManager.java:25 look=[{10..11, 21, 24, 34..35}, 22]
2020-12-13 23:40:30:867 LL1 LogManager.java:25 LL(1)? true
2020-12-13 23:40:30:867 LL1 LogManager.java:25 
DECISION 4 in rule type
2020-12-13 23:40:30:867 LL1 LogManager.java:25 look=[4, 5, 6]
2020-12-13 23:40:30:867 LL1 LogManager.java:25 LL(1)? true
2020-12-13 23:40:30:867 LL1 LogManager.java:25 
DECISION 5 in rule parameter_list
2020-12-13 23:40:30:867 LL1 LogManager.java:25 look=[35, 22]
2020-12-13 23:40:30:867 LL1 LogManager.java:25 LL(1)? true
2020-12-13 23:40:30:867 LL1 LogManager.java:25 
DECISION 6 in rule nemp_parameter_list
2020-12-13 23:40:30:867 LL1 LogManager.java:25 look=[35, 35]
2020-12-13 23:40:30:867 LL1 LogManager.java:25 LL(1)? false
2020-12-13 23:40:30:867 LL1 LogManager.java:25 
DECISION 7 in rule statement_block
2020-12-13 23:40:30:867 LL1 LogManager.java:25 look=[{8, 12..13, 16, 35}, {3, 14}]
2020-12-13 23:40:30:867 LL1 LogManager.java:25 LL(1)? true
2020-12-13 23:40:30:867 LL1 LogManager.java:25 
DECISION 8 in rule statement
2020-12-13 23:40:30:867 LL1 LogManager.java:25 look=[35, 35, 13, 8, 12, 16]
2020-12-13 23:40:30:867 LL1 LogManager.java:25 LL(1)? false
2020-12-13 23:40:30:867 LL1 LogManager.java:25 
DECISION 9 in rule expression
2020-12-13 23:40:30:867 LL1 LogManager.java:25 look=[{10..11, 24, 34..35}, 21, 35, {10..11, 24, 34..35}]
2020-12-13 23:40:30:867 LL1 LogManager.java:25 LL(1)? false
2020-12-13 23:40:30:867 LL1 LogManager.java:25 
DECISION 10 in rule bit
2020-12-13 23:40:30:867 LL1 LogManager.java:25 look=[35, 24, 34, 10, 11]
2020-12-13 23:40:30:867 LL1 LogManager.java:25 LL(1)? true
2020-12-13 23:40:30:867 LL1 LogManager.java:25 
DECISION 11 in rule condition
2020-12-13 23:40:30:867 LL1 LogManager.java:25 look=[25, 21, {10..11, 21, 24, 34..35}]
2020-12-13 23:40:30:867 LL1 LogManager.java:25 LL(1)? false
2020-12-13 23:40:30:867 LL1 LogManager.java:25 
DECISION 12 in rule condition
2020-12-13 23:40:30:868 LL1 LogManager.java:25 look=[null, null]
2020-12-13 23:40:30:868 LL1 LogManager.java:25 LL(1)? false
2020-12-13 23:40:30:868 LL1 LogManager.java:25 
DECISION 13 in rule arg_list
2020-12-13 23:40:30:868 LL1 LogManager.java:25 look=[35, 22]
2020-12-13 23:40:30:868 LL1 LogManager.java:25 LL(1)? true
2020-12-13 23:40:30:868 LL1 LogManager.java:25 
DECISION 14 in rule nemp_arg_list
2020-12-13 23:40:30:868 LL1 LogManager.java:25 look=[35, 35]
2020-12-13 23:40:30:868 LL1 LogManager.java:25 LL(1)? false
2020-12-13 23:40:30:908 action-translator LogManager.java:25 translate 
2020-12-13 23:40:30:910 action-translator LogManager.java:25 translate precpred(_ctx, 1)
2020-12-13 23:40:30:911 action-translator LogManager.java:25 translate precpred(_ctx, 1)
